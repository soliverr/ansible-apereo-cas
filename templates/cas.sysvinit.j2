#!/bin/sh
#
# chkconfig:   345 85 15
# description: Apereo CAS standalone server with embedded servlet container
 
### BEGIN INIT INFO
# Provides: {{ apereo_cas_service }}
# Required-Start: $network $local_fs
# Required-Stop:
# Should-Start:
# Should-Stop:
# Default-Start: 3 4 5
# Default-Stop: 0 1 2 6
# Short-Description:Apereo CAS standalone server with embedded servlet container.
# Description: Starts and stops standalone Apereo CAS server.
### END INIT INFO

{{ ansible_managed | comment }}

#. /etc/rc.d/init.d/functions

# Define default JDK
JAVA_HOME="{{ apereo_cas_java_home }}"
JAVA_OPTS="-Djava.awt.headless=true -Djava.security.egd=file:/dev/./urandom"

OUT_FILE="{{ apereo_cas_logs }}/{{ apereo_cas_service }}.out"
LOCKFILE="{{ apereo_cas_home }}/{{ apereo_cas_service }}.lck"

SERVICE_NAME="Apereo CAS standalone server for {{ apereo_cas_service }}"

# Define WebLogic user
CAS_USER="${CAS_USER:-{{ apereo_cas_user }}}"
CAS_GROUP="${CAS_GROUP:-{{ apereo_cas_group }}}"

PROCESS_STRING="^.*-jar\s+{{ apereo_cas_home }}/{{ apereo_cas_war }}.*"
PROGRAM_START="$JAVA_HOME/bin/java -Dlog4j.configurationFile={{ apereo_cas_etc }}/{{ apereo_cas_logger_properties }} -jar {{ apereo_cas_home }}/{{ apereo_cas_war }} --cas.standalone.config={{ apereo_cas_etc }} --cas.standalone.config.file={{ apereo_cas_etc }}/{{ apereo_cas_properties }}"


RETVAL="0"

# For SELinux we need to use 'runuser' not 'su'
if [ -x "/sbin/runuser" ]; then
    SU="/sbin/runuser -s /bin/sh - $CAS_USER"
else
    SU="/bin/su -s /bin/sh - $CAS_USER"
fi

[ "$(id -nu 2>/dev/null)" = "$CAS_USER" ] && SU="/bin/sh"

start() {
        OLDPID=`/usr/bin/pgrep -f $PROCESS_STRING`
        if [ ! -z "$OLDPID" ]; then
            echo "$SERVICE_NAME is already running (pid $OLDPID) !"
            echo
            exit
        fi
        echo -n $"Starting $SERVICE_NAME ... "
        echo "`date` Starting $SERVICE_NAME ... " > $OUT_FILE 2>&1

        [ "$(id -nu 2>/dev/null)" = "root" ] && chown $CAS_USER:$CAS_GROUP $OUT_FILE

        export JAVA_HOME JAVA_OPTS

        nl=`wc -l $OUT_FILE`
        $SU -c "$PROGRAM_START" >> $OUT_FILE 2>&1  &

        RETVAL=$?
        if [ $RETVAL -eq 0 ] ; then
          wait_for "Ready to process requests" $nl
        else
          echo "FAILED: $RETVAL. Please check $OUT_FILE for more information."
        fi
        echo
}

wait_for() {
    res=$(tail -n +${2:-0} "$OUT_FILE" | fgrep -c "$1")
    count=240
    while [[ ! $res -gt 0 ]] && [[ $count -gt 0 ]]
    do
        sleep 1
        echo -n "."
        count=$(($count - 1))
        res=$(tail -n +${2:-0} "$OUT_FILE" | fgrep -c "$1")
    done
    res=$(tail -n +${2:-0} "$OUT_FILE" | fgrep -c "$1")
    if [ ! $res -gt 0 ]; then
        echo "FAILED or took too long time to start. Please check $OUT_FILE for more information."
    else
        echo "OK"
        touch $LOCKFILE && chown $CAS_USER:$CAS_GROUP $LOCKFILE
    fi
}

stop() {
        echo -n $"Stopping $SERVICE_NAME ... "

        OLDPID=`/usr/bin/pgrep -f $PROCESS_STRING`
        if [ "$OLDPID" != "" ]; then
            echo -n "(pid $OLDPID) "
            /bin/kill -TERM $OLDPID

            RETVAL=$?
            if [ $RETVAL -eq 0 ] ; then
              wait_for "Closing CasWebApplicationContext" $nl
            else
              echo "FAILED: $RETVAL. Please check $OUT_FILE for more information."
            fi
            echo "OK"
            /bin/rm -f $LOCKFILE
        else
            /bin/echo "$SERVICE_NAME is stopped"
        fi
        echo
}

restart() {
        stop
        sleep 10
        start
}

case "$1" in
  start)
        start
        ;;
  stop)
        stop
        ;;
  restart|force-reload|reload)
        restart
        ;;
  condrestart|try-restart)
        [ -f $LOCKFILE ] && restart
        ;;
  status)
        OLDPID=`/usr/bin/pgrep -f $PROCESS_STRING`
        if [ "$OLDPID" != "" ]; then
            /bin/echo "$SERVICE_NAME is running (pid: $OLDPID)"
        else
            /bin/echo "$SERVICE_NAME is stopped"
        fi
        echo
        RETVAL=$?
        ;;
  *)
        echo $"Usage: $0 {start|stop|status|restart|reload|force-reload|condrestart}"
        exit 1
esac

exit $RETVAL
